/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Server.cpp                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yonieva <yonieva@student.42perpignan.fr    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/31 15:07:45 by yonieva           #+#    #+#             */
/*   Updated: 2025/04/02 16:47:41 by yonieva          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../Includes/Server.hpp"
#include "../Includes/Parsing.hpp"


// Constructeur du serveur
Server::Server(int port) : _port(port) 
{
    // Cr√©ation du socket du serveur
    _serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (_serverSocket < 0) 
    {
        std::cerr << "‚ùåErreur‚ùå : Impossible de cr√©er le socket" << std::endl;
        exit(EXIT_FAILURE);
    }

    // Permet de r√©utiliser rapidement l'adresse et le port apr√®s un arr√™t
    int opt = 1;
    setsockopt(_serverSocket, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));

    // Configuration de l'adresse du serveur
    struct sockaddr_in serverAddr;
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(_port);

    // Attacher le socket √† l'adresse et au port
    if (bind(_serverSocket, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {
        std::cerr << "‚ùåErreur‚ùå : Bind √©chou√©" << std::endl;
        exit(EXIT_FAILURE);
    }

    // √âcoute des connexions entrantes
    if (listen(_serverSocket, 10) < 0) 
    {
        std::cerr << "‚ùåErreur‚ùå : Listen √©chou√©" << std::endl;
        exit(EXIT_FAILURE);
    }

    // Ajouter le socket du serveur √† poll()
    struct pollfd serverPollFd;
    serverPollFd.fd = _serverSocket;
    serverPollFd.events = POLLIN;
    _pollFds.push_back(serverPollFd);

    std::cout << "‚úÖ Serveur lanc√© sur le port " << _port << std::endl;
}




// Destructeur : ferme le socket principal et tous les clients
Server::~Server() 
{
    close(_serverSocket);
    for (size_t i = 0; i < _pollFds.size(); i++) 
    {
        close(_pollFds[i].fd);
    }
}



// G√®re les nouvelles connexions clients
void Server::handleNewConnection() 
{
    struct sockaddr_in clientAddr;
    socklen_t clientAddrSize = sizeof(clientAddr);

    int clientSocket = accept(_serverSocket, (struct sockaddr*)&clientAddr, &clientAddrSize);
    if (clientSocket < 0) 
    {
        std::cerr << "‚ö†Ô∏è Erreur : Accept √©chou√©" << std::endl;
        return;
    }

    // Mettre le socket en mode non bloquant
    fcntl(clientSocket, F_SETFL, O_NONBLOCK);

    // Ajouter le client √† poll()
    struct pollfd clientPollFd;
    clientPollFd.fd = clientSocket;
    clientPollFd.events = POLLIN;
    _pollFds.push_back(clientPollFd);

    // Cr√©ation du User dans IRCManager
    ircManager.newUser(clientSocket);

    std::cout << "üÜï Nouvelle connexion accept√©e (FD : " << clientSocket << ")" << std::endl;
}


// G√®re les messages envoy√©s par un client avec parsing puis envoi a  irc_manager
void Server::handleClientMessage(int clientFd) 
{
    char buffer[512];
    memset(buffer, 0, sizeof(buffer));

    int bytesReceived = recv(clientFd, buffer, sizeof(buffer) - 1, 0);
    if (bytesReceived <= 0) 
    {
        std::cout << "‚ùå Client d√©connect√© (FD : " << clientFd << ")" << std::endl;
        removeClient(clientFd);
        ircManager.removeUser(clientFd);
        return;
    }

    std::string message(buffer);
    std::vector<std::string> command = parser.parseCommand(message);

    if (!command.empty()) 
    {
        std::cout << "üîç Commande re√ßue : " << command[0] << std::endl;
        User *user = ircManager.getUser(clientFd);
        
        if (!user) 
            return;

        if (command[0] == "NICK" && command.size() > 1) 
            //ircManager.nickCommand(clientFd, command[1]);
        else if (command[0] == "USER" && command.size() > 1) 
            //ircManager.userCommand(clientFd, command[1]);

        // ‚úÖ V√©rification avant toute action
        else if (!user->getIsAuthenticated()) 
        {
            std::string errorMsg = "‚ùå Vous devez vous authentifier avec NICK et USER !\n";
            send(clientFd, errorMsg.c_str(), errorMsg.length(), 0);
        }
        else if (command[0] == "JOIN" && command.size() > 1) 
            ircManager.joinCommand(clientFd, command[1]);
        else if (command[0] == "PART" && command.size() > 1) 
            ircManager.partCommand(clientFd, command[1]);
        else if (command[0] == "PRIVMSG" && command.size() > 2) 
            ircManager.privmsgCommand(clientFd, command[1], command[2]);
    }
}





// Supprime un client qui s'est d√©connect√©
void Server::removeClient(int clientFd) 
{
    close(clientFd);
    for (size_t i = 0; i < _pollFds.size(); i++) 
    {
        if (_pollFds[i].fd == clientFd) 
        {
            _pollFds.erase(_pollFds.begin() + i);
            break;
        }
    }
}

// Boucle principale du serveur
void Server::run() 
{
    while (true) 
    {
        int pollCount = poll(_pollFds.data(), _pollFds.size(), -1);
        if (pollCount < 0) 
        {
            std::cerr << "‚ö†Ô∏è‚ùå Erreur : poll() a √©chou√©" << std::endl;
            exit(EXIT_FAILURE);
        }

        for (size_t i = 0; i < _pollFds.size(); i++) 
        {
            if (_pollFds[i].revents & POLLIN) 
            {
                if (_pollFds[i].fd == _serverSocket) 
                    handleNewConnection();
                else 
                    handleClientMessage(_pollFds[i].fd);
            }
        }
    }
}
/*
-----------------------------------------------------------ETAPES-----------------------------------
1Ô∏è‚É£ Initialisation du serveur (Server::Server())

Cr√©ation du socket

Configuration de l'adresse (sockaddr_in)

bind() pour attacher le socket √† un port

listen() pour accepter les connexions

Ajout du serveur √† poll()

2Ô∏è‚É£ Acceptation des connexions (handleNewConnection())

V√©rification de poll() pour voir si un client veut se connecter

accept() pour accepter la connexion

Passage du socket en mode non bloquant (fcntl())

Ajout du client √† poll()

3Ô∏è‚É£ R√©ception des messages (handleClientMessage())

recv() pour lire les donn√©es

Si recv() <= 0, on consid√®re le client d√©connect√© (removeClient())

Sinon, on affiche le message et on fait un "Echo Server" en renvoyant le message

4Ô∏è‚É£ Suppression des clients (removeClient())

Fermeture du socket

Suppression du client de poll()

5Ô∏è‚É£ Boucle principale (run())

poll() pour surveiller les √©v√©nements

Gestion des nouvelles connexions

Gestion des messages des clients

---------------------------------------------------------------RESUME-----------------------------------
Le serveur cr√©e un socket et √©coute sur le port donn√©.

Il ajoute ce socket √† poll() pour surveiller les nouvelles connexions.

Quand une connexion arrive :

accept() l'accepte.

fcntl() rend le socket non bloquant.

poll() ajoute le client √† la liste.

Quand un client envoie un message :

recv() le lit.

Si le message est vide (pas un mes vide "" mais si ca retourne 0), le client est d√©connect√© (removeClient()).

Sinon, le message est affich√© et renvoy√© (serveur Echo pour l‚Äôinstant).

La boucle poll() g√®re tout sans bloquer :

Si une nouvelle connexion arrive ‚Üí handleNewConnection().

Si un client envoie un message ‚Üí handleClientMessage().

Si un client se d√©connecte ‚Üí removeClient().
------------------------------------------------------------------------------------------------------
*/





//DETAIL CONSTRUCTION DU SERVEUR (via constructeur)
//-------------------------------------------------------------------------------------------------------------------------
/*
(1)
3 arguments pour socket
socket(domain, type, protocol);

domain	               AF_INET	                  Indique que c'est un socket pour IPv4 (Internet).
type	             SOCK_STREAM	              Indique que c'est un socket TCP (connexion fiable, flux continu).
protocol	               0	                  Laisse le syst√®me choisir le protocole par d√©faut (ici TCP).
---------------------------------------------------------------------------------------------------------------------------
(2)
memset(&serverAddr, 0, sizeof(serverAddr));
Cette ligne remplit serverAddr avec des z√©ros (efface tout).
pour √©viter des valeurs non initialis√©es.


serverAddr.sin_family = AF_INET;
D√©finit le type d‚Äôadresse utilis√© par le socket : IPv4 (AF_INET).
Si on voulait IPv6, on utiliserait AF_INET6.

serverAddr.sin_addr.s_addr = INADDR_ANY;
Assigne l‚Äôadresse IP du serveur.
INADDR_ANY signifie "√©couter sur toutes les interfaces r√©seau disponibles".
Cela permet au serveur d'accepter des connexions sur toutes les adresses IP de la machine (ex : 127.0.0.1, 192.168.x.x, 10.x.x.x...).


serverAddr.sin_port = htons(_port);
D√©finit le port sur lequel le serveur va √©couter.
_port est la variable qui stocke le port pass√© en argument.
htons() (Host TO Network Short) convertit _port en format big-endian.
Les r√©seaux utilisent big-endian, alors que certaines machines (Intel x86) utilisent little-endian.
htons() s'assure que le port est bien compris sur le r√©seau.
--------------------------------------------------------------------------------------------------------------------------------
(3)
La fonction bind() prend trois arguments :

bind(socket_fd, (struct sockaddr*)&serverAddr, sizeof(serverAddr));

socket_fd	 :Le descripteur du socket (ici _serverSocket).
address	     :Un pointeur vers une structure sockaddr contenant l'IP et le port.
size	     :La taille de la structure sockaddr_in pass√©e en param√®tre.


üîπ Que fait bind() ?
Associe le socket √† une adresse IP et un port (ceux d√©finis dans serverAddr).
C'est une √©tape obligatoire avant de mettre le serveur en √©coute avec listen().

üîπ Pourquoi bind() peut √©chouer ?
Si bind() renvoie -1, c‚Äôest qu‚Äôil y a une erreur, comme :
Le port est d√©j√† utilis√© ‚ùå (un autre serveur tourne sur ce port).
Manque de permissions ‚ùå (les ports <1024 n√©cessitent des privil√®ges root).
Adresse non valide ‚ùå (serverAddr mal configur√©).
---------------------------------------------------------------------------------------------------------------------------------
(4)
2 arguments pour listen
listen(socket_fd, backlog);

socket_fd :	Le descripteur de fichier du socket (_serverSocket).
backlog	 : Le nombre maximum de connexions en attente dans la file d'attente avant que les connexions soient refus√©es. Ici, c‚Äôest 10.

üîπ Ce que fait listen()
Mise en √©coute du socket.
Le serveur attend maintenant que des clients se connectent √† ce socket.
Le deuxi√®me argument, backlog, sp√©cifie la taille de la file d'attente pour les connexions entrantes.
Si un client essaie de se connecter alors que la file d'attente est pleine, la connexion sera refus√©e jusqu'√† ce qu'il y ait de la place dans la file.
Ici, 10 indique qu'on peut avoir jusqu‚Äô√† 10 connexions en attente
---------------------------------------------------------------------------------------------------------------------------------
(5)
Ce code permet d'ajouter le socket du serveur √† une liste de descripteurs de fichiers surveill√©s par poll().

Ajouter le socket du serveur √† poll()

struct pollfd serverPollFd :

serverPollFd.fd = _serverSocket;
serverPollFd.events = POLLIN;
_pollFds.push_back(serverPollFd);

struct pollfd serverPollFd;
D√©clare une structure pollfd qui repr√©sente un descripteur de fichier surveill√© par poll().

Cette structure contient trois champs :
struct pollfd 
{
    int   fd;      // Descripteur de fichier (socket ici)
    short events;  // √âv√©nements surveill√©s (lecture, √©criture, etc.)
    short revents; // √âv√©nements d√©tect√©s (rempli apr√®s poll())
};

serverPollFd.fd = _serverSocket;
On assigne √† fd le descripteur du socket du serveur (_serverSocket).
Cela signifie qu'on va surveiller les √©v√©nements sur ce socket.

serverPollFd.events = POLLIN;
On indique qu'on veut surveiller l'√©v√©nement POLLIN, c'est-√†-dire si le socket est pr√™t √† lire.
Concr√®tement, cela permet de d√©tecter une nouvelle connexion entrante sur le socket du serveur.
POLLIN est utilis√© pour savoir si des donn√©es sont disponibles en lecture ou si une connexion entrante est pr√™te √† √™tre accept√©e.

_pollFds.push_back(serverPollFd);
On ajoute serverPollFd √† un vecteur _pollFds, qui stocke tous les descripteurs surveill√©s.
_pollFds est s√ªrement un std::vector<struct pollfd> qui stocke tous les sockets surveill√©s (le serveur + les clients).
poll() sera ensuite utilis√© pour v√©rifier l'√©tat de ces descripteurs.

Pourquoi utiliser poll() ici ?
Contrairement √† select(), poll() permet de g√©rer plusieurs connexions simultan√©ment sans limite stricte sur le nombre de sockets.
Il permet d'attendre de nouveaux clients sans bloquer le programme.
Quand poll() d√©tecte que _serverSocket est pr√™t en lecture, √ßa signifie qu'un client tente de se connecter ‚Üí on pourra alors l‚Äôaccepter avec accept().

R√©sum√©
Ajoute le socket du serveur √† poll() pour d√©tecter les nouvelles connexions.
Utilise POLLIN pour surveiller les √©v√©nements de lecture.
Stocke le socket dans _pollFds, qui sera pass√© √† poll() pour v√©rifier l'activit√© r√©seau.
*/